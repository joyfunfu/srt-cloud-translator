declare enum ChatMessageRole {
    User = "user",
    Assistant = "assistant"
}

declare enum ModelType {
    ChatGLMPro = "chatglm_pro",
    ChatGLMStd = "chatglm_std",
    ChatGLMLite = "chatglm_lite"
}

declare enum TaskStatus {
    Processing = "PROCESSING",
    Success = "SUCCESS",
    Fail = "FAIL"
}

interface Response<T> {
    code: number;
    msg: string;
    success: boolean;
    data: T;
}

type AsyncInvokeResponse = Response<{
    request_id: string;
    task_id: string;
    task_status: TaskStatus;
}>;

interface ChatMessage {
    role: ChatMessageRole;
    content: string;
}

type InvokeResponse = Response<{
    request_id: string;
    task_id: string;
    task_status: TaskStatus;
    choices: ChatMessage[];
    usage: {
        total_tokens: number;
    };
}>;

interface RequestOptions {
    model: ModelType;
    messages: ChatMessage[];
    temperature?: number;
    topP?: number;
    requestId?: string;
    incremental?: boolean;
    token?: string;
    timeout?: number;
}

interface ZhipuSSEResponse {
    id: string;
    event: 'add' | 'finish';
    data: string;
    meta: string;
}
type SSEResponse = {
    id: string;
    event: 'add';
    data: string;
} | {
    id: string;
    event: 'finish';
    data: string;
    meta: {
        task_status: TaskStatus;
        usage: {
            total_tokens: string;
        };
        task_id: string;
        request_id: string;
    };
};

interface ZhipuAIOptions {
    apiKey: string;
    apiPrefix: string;
    browser: boolean;
    tokenTTL: number;
    tokenRefreshTTL: number;
}

declare function generateToken(apiKey: string, timestamp: number, ttl: number): never;

declare class ZhipuAI {
    private cachedToken;
    private options;
    constructor(opts?: Partial<ZhipuAIOptions>);
    private getToken;
    private buildApiUrl;
    private buildRequestBody;
    private buildAxiosRequestConfig;
    private handleError;
    private request;
    invoke(options: RequestOptions): Promise<InvokeResponse['data']>;
    asyncInvoke(options: RequestOptions): Promise<AsyncInvokeResponse['data']>;
    queryAsyncInvokeResult(taskId: string, options?: Pick<RequestOptions, 'timeout' | 'token'>): Promise<InvokeResponse['data']>;
    sseInvoke(options: RequestOptions): Promise<AsyncGenerator<SSEResponse, void, unknown>>;
}

export { AsyncInvokeResponse, ChatMessage, ChatMessageRole, InvokeResponse, ModelType, RequestOptions, Response, SSEResponse, TaskStatus, ZhipuAI, ZhipuAIOptions, ZhipuSSEResponse, generateToken };
